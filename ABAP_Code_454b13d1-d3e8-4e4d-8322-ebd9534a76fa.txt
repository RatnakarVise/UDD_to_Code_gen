REPORT zmm_po_close.

*----------------------------------------------------------------------
* Utility to close open POs (sets EKPO-ELIKZ = 'X' via BAPI_PO_CHANGE)
* Output: ALV Grid with selection and mass close action
* Author: Generated by Assistant (refined)
*----------------------------------------------------------------------
TYPE-POOLS: icon.

TABLES: ekko, ekpo, mara, lfa1.

*----------------------------------------------------------------------
* Selection screen
*----------------------------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-t01.
SELECT-OPTIONS: s_matnr FOR ekpo-matnr,
                s_werks FOR ekpo-werks OBLIGATORY,
                s_lifnr FOR ekko-lifnr,
                s_mtart FOR mara-mtart.
SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.
  text-t01 = 'Selection Parameters'.

*----------------------------------------------------------------------
* Types
*----------------------------------------------------------------------
TYPES: BEGIN OF ty_alv,
         sel     TYPE c LENGTH 1,        "Selection checkbox
         ebeln   TYPE ekko-ebeln,        "PO Number
         ebelp   TYPE ekpo-ebelp,        "PO Item
         lifnr   TYPE ekko-lifnr,        "Vendor
         name1   TYPE lfa1-name1,        "Vendor Name
         matnr   TYPE ekpo-matnr,        "Material
         mtart   TYPE mara-mtart,        "Material Type
         werks   TYPE ekpo-werks,        "Plant
         menge   TYPE ekpo-menge,        "Order Qty
         wemng   TYPE ekpo-wemng,        "GR Qty
         openqty TYPE ekpo-menge,        "Open Qty (calc)
         meins   TYPE ekpo-meins,        "UoM
         bedat   TYPE ekko-bedat,        "PO Creation Date
         aedat   TYPE ekpo-aedat,        "Item Change Date
         elikz   TYPE ekpo-elikz,        "Delivery Completed
         loekz   TYPE ekpo-loekz,        "Deletion Indicator
       END OF ty_alv.

TYPES: ty_t_alv TYPE STANDARD TABLE OF ty_alv WITH DEFAULT KEY.

TYPES: BEGIN OF ty_join,
         ebeln TYPE ekko-ebeln,
         ebelp TYPE ekpo-ebelp,
         lifnr TYPE ekko-lifnr,
         name1 TYPE lfa1-name1,
         matnr TYPE ekpo-matnr,
         mtart TYPE mara-mtart,
         werks TYPE ekpo-werks,
         menge TYPE ekpo-menge,
         wemng TYPE ekpo-wemng,
         meins TYPE ekpo-meins,
         bedat TYPE ekko-bedat,
         aedat TYPE ekpo-aedat,
         elikz TYPE ekpo-elikz,
         loekz TYPE ekpo-loekz,
       END OF ty_join.
TYPES: ty_t_join TYPE STANDARD TABLE OF ty_join WITH DEFAULT KEY.

*----------------------------------------------------------------------
* Global data
*----------------------------------------------------------------------
DATA: lt_alv      TYPE ty_t_alv,
      ls_alv      TYPE ty_alv,
      lt_join     TYPE ty_t_join.

* ALV objects
DATA: go_container TYPE REF TO cl_gui_custom_container,
      go_grid      TYPE REF TO cl_gui_alv_grid.

DATA: lt_fcat     TYPE lvc_t_fcat,
      ls_fcat     TYPE lvc_s_fcat,
      ls_layout   TYPE lvc_s_layo,
      ls_variant  TYPE disvariant,
      lv_is_init  TYPE abap_bool VALUE abap_false.

CONSTANTS: c_fcode_close TYPE ui_func VALUE 'ZCLOSE'.

*----------------------------------------------------------------------
* Local event handler for ALV Grid
*----------------------------------------------------------------------
CLASS lcl_events DEFINITION.
  PUBLIC SECTION.
    METHODS: handle_toolbar FOR EVENT toolbar OF cl_gui_alv_grid
               IMPORTING e_object e_interactive,
             handle_user_command FOR EVENT user_command OF cl_gui_alv_grid
               IMPORTING e_ucomm,
             handle_double_click FOR EVENT double_click OF cl_gui_alv_grid
               IMPORTING e_row e_column es_row_no.
ENDCLASS.

CLASS lcl_events IMPLEMENTATION.
  METHOD handle_toolbar.
    DATA ls_button TYPE stb_button.
    CLEAR ls_button.
    ls_button-function  = c_fcode_close.
    ls_button-icon      = icon_complete.
    ls_button-quickinfo = 'Close Selected Items'.
    ls_button-text      = 'Close Selected'.
    ls_button-disabled  = ' '.
    APPEND ls_button TO e_object->mt_toolbar.

    "Separator
    CLEAR ls_button.
    ls_button-butn_type = 3.
    APPEND ls_button TO e_object->mt_toolbar.
  ENDMETHOD.

  METHOD handle_user_command.
    CASE e_ucomm.
      WHEN c_fcode_close.
        PERFORM close_selected_items.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD handle_double_click.
    "Toggle checkbox on double-click
    DATA lv_index TYPE sy-tabix.
    lv_index = es_row_no-row_id.
    IF lv_index GT 0 AND lv_index LE lines( lt_alv ).
      READ TABLE lt_alv INTO DATA(ls_row_alv) INDEX lv_index.
      IF sy-subrc = 0.
        IF ls_row_alv-sel = 'X'.
          ls_row_alv-sel = space.
        ELSE.
          ls_row_alv-sel = 'X'.
        ENDIF.
        MODIFY lt_alv FROM ls_row_alv INDEX lv_index.
        IF go_grid IS BOUND.
          go_grid->refresh_table_display( ).
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

DATA: go_events TYPE REF TO lcl_events.

*----------------------------------------------------------------------
* Selection checks
*----------------------------------------------------------------------
AT SELECTION-SCREEN.
  IF s_werks[] IS INITIAL.
    MESSAGE e398(00) WITH 'Plant selection (S_WERKS) is mandatory'.
  ENDIF.

*----------------------------------------------------------------------
* Start-of-selection
*----------------------------------------------------------------------
START-OF-SELECTION.
  PERFORM get_data.
  IF lt_alv IS INITIAL.
    MESSAGE s398(00) WITH 'No open PO items found for given criteria'.
  ELSE.
    CALL SCREEN 0100.
  ENDIF.

*----------------------------------------------------------------------
* Screen 0100 definition
*----------------------------------------------------------------------
MODULE status_0100 OUTPUT.
  SET PF-STATUS 'STANDARD' EXCLUDING space.
  SET TITLEBAR 'T01' WITH 'Utility to close open POs'.
  IF lv_is_init = abap_false.
    PERFORM init_alv.
    lv_is_init = abap_true.
  ELSE.
    IF go_grid IS BOUND.
      go_grid->refresh_table_display( is_stable = VALUE lvc_s_stbl( row = 'X' col = 'X' ) ).
    ENDIF.
  ENDIF.
ENDMODULE.

MODULE user_command_0100 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      LEAVE PROGRAM.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

*----------------------------------------------------------------------
* ALV initialization
*----------------------------------------------------------------------
FORM init_alv.
  "Create container and ALV grid
  CREATE OBJECT go_container
    EXPORTING
      container_name = 'CC_ALV'.

  CREATE OBJECT go_grid
    EXPORTING
      i_parent = go_container.

  "Register event handler
  CREATE OBJECT go_events.
  SET HANDLER go_events->handle_toolbar       FOR go_grid.
  SET HANDLER go_events->handle_user_command  FOR go_grid.
  SET HANDLER go_events->handle_double_click  FOR go_grid.

  "Field catalog and layout
  PERFORM build_fieldcatalog.
  PERFORM build_layout.

  CLEAR ls_variant.
  ls_variant-report = sy-repid.

  "Initial display
  CALL METHOD go_grid->set_table_for_first_display
    EXPORTING
      is_layout       = ls_layout
      i_save          = 'A'
      is_variant      = ls_variant
    CHANGING
      it_outtab       = lt_alv
      it_fieldcatalog = lt_fcat.

  "Allow multiple row selection
  CALL METHOD go_grid->set_selection_mode
    EXPORTING
      i_selection_mode = cl_gui_alv_grid=>mc_selmode_a.
ENDFORM.

*----------------------------------------------------------------------
* Build field catalog
*----------------------------------------------------------------------
FORM build_fieldcatalog.
  DATA lv_pos TYPE i VALUE 0.
  CLEAR lt_fcat.

  "Helper macro for field catalog line
  DEFINE m_fcat.
    CLEAR ls_fcat.
    lv_pos = lv_pos + 1.
    ls_fcat-col_pos   = lv_pos.
    ls_fcat-fieldname = &1.
    ls_fcat-coltext   = &2.
    ls_fcat-outputlen = &3.
    ls_fcat-ref_table = &4.
    ls_fcat-ref_field = &5.
    APPEND ls_fcat TO lt_fcat.
  END-OF-DEFINITION.

  "Selection checkbox
  CLEAR ls_fcat.
  lv_pos = lv_pos + 1.
  ls_fcat-col_pos   = lv_pos.
  ls_fcat-fieldname = 'SEL'.
  ls_fcat-coltext   = 'Sel'.
  ls_fcat-checkbox  = 'X'.
  ls_fcat-edit      = 'X'.
  ls_fcat-outputlen = 3.
  APPEND ls_fcat TO lt_fcat.

  m_fcat 'EBELN'  'PO Number'           10 'EKKO' 'EBELN'.
  m_fcat 'EBELP'  'Item'                 5 'EKPO' 'EBELP'.
  m_fcat 'LIFNR'  'Vendor'              10 'EKKO' 'LIFNR'.
  m_fcat 'NAME1'  'Vendor Name'         35 'LFA1' 'NAME1'.
  m_fcat 'MATNR'  'Material'            18 'EKPO' 'MATNR'.
  m_fcat 'MTART'  'Mat. Type'            4 'MARA' 'MTART'.
  m_fcat 'WERKS'  'Plant'                4 'EKPO' 'WERKS'.

  CLEAR ls_fcat.
  lv_pos = lv_pos + 1.
  ls_fcat-col_pos   = lv_pos.
  ls_fcat-fieldname = 'MENGE'.
  ls_fcat-coltext   = 'Order Qty'.
  ls_fcat-ref_table = 'EKPO'.
  ls_fcat-ref_field = 'MENGE'.
  ls_fcat-do_sum    = 'X'.
  APPEND ls_fcat TO lt_fcat.

  CLEAR ls_fcat.
  lv_pos = lv_pos + 1.
  ls_fcat-col_pos   = lv_pos.
  ls_fcat-fieldname = 'WEMNG'.
  ls_fcat-coltext   = 'GR Qty'.
  ls_fcat-ref_table = 'EKPO'.
  ls_fcat-ref_field = 'WEMNG'.
  ls_fcat-do_sum    = 'X'.
  APPEND ls_fcat TO lt_fcat.

  CLEAR ls_fcat.
  lv_pos = lv_pos + 1.
  ls_fcat-col_pos   = lv_pos.
  ls_fcat-fieldname = 'OPENQTY'.
  ls_fcat-coltext   = 'Open Qty'.
  ls_fcat-ref_table = 'EKPO'.
  ls_fcat-ref_field = 'MENGE'.
  ls_fcat-do_sum    = 'X'.
  APPEND ls_fcat TO lt_fcat.

  m_fcat 'MEINS'  'UoM'                  3 'EKPO' 'MEINS'.
  m_fcat 'BEDAT'  'PO Date'              10 'EKKO' 'BEDAT'.
  m_fcat 'AEDAT'  'Item Chg. Date'       10 'EKPO' 'AEDAT'.
  m_fcat 'ELIKZ'  'Deliv. Compl.'         1 'EKPO' 'ELIKZ'.
  m_fcat 'LOEKZ'  'Deletion Ind.'         1 'EKPO' 'LOEKZ'.
ENDFORM.

*----------------------------------------------------------------------
* Build layout
*----------------------------------------------------------------------
FORM build_layout.
  CLEAR ls_layout.
  ls_layout-zebra         = 'X'.
  ls_layout-cwidth_opt    = 'X'.
  ls_layout-sel_mode      = 'A'.
  ls_layout-box_fieldname = 'SEL'.
ENDFORM.

*----------------------------------------------------------------------
* Data extraction
*----------------------------------------------------------------------
FORM get_data.
  CLEAR: lt_join, lt_alv.

  "Select open, non-deleted items for plants in selection
  SELECT a~ebeln
         b~ebelp
         a~lifnr
         f~name1
         b~matnr
         m~mtart
         b~werks
         b~menge
         b~wemng
         b~meins
         a~bedat
         b~aedat
         b~elikz
         b~loekz
    FROM ekko AS a
    INNER JOIN ekpo AS b
      ON a~ebeln = b~ebeln
    LEFT JOIN lfa1 AS f
      ON a~lifnr = f~lifnr
    LEFT JOIN mara AS m
      ON b~matnr = m~matnr
    INTO TABLE lt_join
    WHERE b~elikz = ' '
      AND b~loekz = ' '
      AND b~werks IN s_werks.

  IF sy-subrc <> 0 OR lt_join IS INITIAL.
    RETURN.
  ENDIF.

  "Apply optional filters
  IF s_lifnr[] IS NOT INITIAL.
    DELETE lt_join WHERE lifnr NOT IN s_lifnr.
  ENDIF.
  IF s_matnr[] IS NOT INITIAL.
    DELETE lt_join WHERE matnr NOT IN s_matnr.
  ENDIF.
  IF s_mtart[] IS NOT INITIAL.
    DELETE lt_join WHERE mtart NOT IN s_mtart.
  ENDIF.

  "Prepare ALV rows
  DATA(ls_join) = VALUE ty_join( ).
  LOOP AT lt_join INTO ls_join.
    CLEAR ls_alv.
    ls_alv-sel     = space.
    ls_alv-ebeln   = ls_join-ebeln.
    ls_alv-ebelp   = ls_join-ebelp.
    ls_alv-lifnr   = ls_join-lifnr.
    ls_alv-name1   = ls_join-name1.
    ls_alv-matnr   = ls_join-matnr.
    ls_alv-mtart   = ls_join-mtart.
    ls_alv-werks   = ls_join-werks.
    ls_alv-menge   = ls_join-menge.
    ls_alv-wemng   = ls_join-wemng.
    ls_alv-openqty = ls_join-menge - ls_join-wemng.
    ls_alv-meins   = ls_join-meins.
    ls_alv-bedat   = ls_join-bedat.
    ls_alv-aedat   = ls_join-aedat.
    ls_alv-elikz   = ls_join-elikz.
    ls_alv-loekz   = ls_join-loekz.
    APPEND ls_alv TO lt_alv.
  ENDLOOP.
ENDFORM.

*----------------------------------------------------------------------
* Close selected items using BAPI_PO_CHANGE
*----------------------------------------------------------------------
FORM close_selected_items.
  DATA: lt_rows     TYPE lvc_t_row,
        ls_row      TYPE lvc_s_row,
        lt_sel_alv  TYPE ty_t_alv,
        ls_sel_alv  TYPE ty_alv.

  "Sync ALV edits and get row selections
  IF go_grid IS BOUND.
    go_grid->check_changed_data( ).
    go_grid->get_selected_rows(
      IMPORTING
        et_index_rows = lt_rows
    ).
  ENDIF.

  "Collect selected entries by checkbox
  LOOP AT lt_alv INTO ls_sel_alv WHERE sel = 'X'.
    APPEND ls_sel_alv TO lt_sel_alv.
  ENDLOOP.

  "Add entries selected by row selection
  LOOP AT lt_rows INTO ls_row.
    READ TABLE lt_alv INTO ls_sel_alv INDEX ls_row-index.
    IF sy-subrc = 0.
      APPEND ls_sel_alv TO lt_sel_alv.
    ENDIF.
  ENDLOOP.

  IF lt_sel_alv IS INITIAL.
    MESSAGE s398(00) WITH 'No rows selected. Use checkbox or row selection.'.
    RETURN.
  ENDIF.

  "Remove duplicates by key (EBELN, EBELP)
  SORT lt_sel_alv BY ebeln ebelp.
  DELETE ADJACENT DUPLICATES FROM lt_sel_alv COMPARING ebeln ebelp.

  "Prepare BAPI buffers and counters
  DATA: lv_current_ebeln TYPE ekko-ebeln,
        lt_items         TYPE STANDARD TABLE OF bapimepoitem WITH DEFAULT KEY,
        lt_itemsx        TYPE STANDARD TABLE OF bapimepoitemx WITH DEFAULT KEY,
        ls_item          TYPE bapimepoitem,
        ls_itemx         TYPE bapimepoitemx,
        lt_return        TYPE STANDARD TABLE OF bapiret2 WITH DEFAULT KEY,
        ls_return        TYPE bapiret2,
        lv_success_cnt   TYPE i VALUE 0,
        lv_error_cnt     TYPE i VALUE 0,
        lv_total_cnt     TYPE i VALUE 0.

  "Count total items selected
  FIELD-SYMBOLS: <ls_sel> TYPE ty_alv.
  LOOP AT lt_sel_alv ASSIGNING <ls_sel>.
    ADD 1 TO lv_total_cnt.
  ENDLOOP.

  "Process items grouped by PO
  DATA lt_sel_by_po TYPE ty_t_alv.
  lt_sel_by_po = lt_sel_alv.
  SORT lt_sel_by_po BY ebeln ebelp.
  CLEAR lv_current_ebeln.

  LOOP AT lt_sel_by_po ASSIGNING <ls_sel>.
    IF lv_current_ebeln IS INITIAL.
      lv_current_ebeln = <ls_sel>-ebeln.
      CLEAR: lt_items, lt_itemsx.
    ENDIF.

    IF <ls_sel>-ebeln <> lv_current_ebeln.
      "Post previous PO changes
      PERFORM bapi_close_po_items USING lv_current_ebeln lt_items lt_itemsx
                                  CHANGING lt_return lv_success_cnt lv_error_cnt.
      "Start new PO batch
      lv_current_ebeln = <ls_sel>-ebeln.
      CLEAR: lt_items, lt_itemsx.
    ENDIF.

    "Skip already closed/deleted items (safety)
    IF <ls_sel>-elikz = 'X' OR <ls_sel>-loekz = 'L'.
      CONTINUE.
    ENDIF.

    CLEAR: ls_item, ls_itemx.
    ls_item-po_item      = <ls_sel>-ebelp.
    ls_item-deliv_compl  = 'X'.

    ls_itemx-po_item     = <ls_sel>-ebelp.
    ls_itemx-po_itemx    = 'X'.
    ls_itemx-deliv_compl = 'X'.

    APPEND ls_item  TO lt_items.
    APPEND ls_itemx TO lt_itemsx.
  ENDLOOP.

  "Post last PO batch
  IF lv_current_ebeln IS NOT INITIAL AND lt_items IS NOT INITIAL.
    CLEAR lt_return.
    PERFORM bapi_close_po_items USING lv_current_ebeln lt_items lt_itemsx
                                CHANGING lt_return lv_success_cnt lv_error_cnt.
  ENDIF.

  "Optimistically update ALV rows for selected items
  LOOP AT lt_alv ASSIGNING <ls_sel>.
    READ TABLE lt_sel_alv WITH KEY ebeln = <ls_sel>-ebeln ebelp = <ls_sel>-ebelp TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      <ls_sel>-elikz   = 'X'.
      <ls_sel>-openqty = 0.
    ENDIF.
  ENDLOOP.

  IF go_grid IS BOUND.
    go_grid->refresh_table_display( is_stable = VALUE lvc_s_stbl( row = 'X' col = 'X' ) ).
  ENDIF.

  MESSAGE s398(00) WITH |Processed { lv_total_cnt } item(s): { lv_success_cnt } closed, { lv_error_cnt } failed.|.
ENDFORM.

*----------------------------------------------------------------------
* Helper: Call BAPI_PO_CHANGE for a PO with item list
*----------------------------------------------------------------------
FORM bapi_close_po_items USING    iv_ebeln   TYPE ekko-ebeln
                                  it_items   TYPE STANDARD TABLE OF bapimepoitem
                                  it_itemsx  TYPE STANDARD TABLE OF bapimepoitemx
                         CHANGING ct_return  TYPE STANDARD TABLE OF bapiret2
                                  cv_success TYPE i
                                  cv_error   TYPE i.
  DATA: lt_return   TYPE STANDARD TABLE OF bapiret2 WITH DEFAULT KEY,
        ls_ret      TYPE bapiret2,
        lv_has_error TYPE abap_bool VALUE abap_false.

  IF it_items IS INITIAL.
    RETURN.
  ENDIF.

  CALL FUNCTION 'BAPI_PO_CHANGE'
    EXPORTING
      purchaseorder = iv_ebeln
    TABLES
      return        = lt_return
      poitem        = it_items
      poitemx       = it_itemsx.

  LOOP AT lt_return INTO ls_ret WHERE type = 'E' OR type = 'A'.
    lv_has_error = abap_true.
    EXIT.
  ENDLOOP.

  IF lv_has_error = abap_false.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
    ADD lines( it_items ) TO cv_success.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ADD lines( it_items ) TO cv_error.
  ENDIF.

  APPEND LINES OF lt_return TO ct_return.
ENDFORM.

*----------------------------------------------------------------------
* Screen 0100 layout
*----------------------------------------------------------------------
* The screen 0100 must contain:
* - Custom Control CC_ALV (container for the ALV Grid)
*----------------------------------------------------------------------
* Dynpro flow logic (for reference):
* PROCESS BEFORE OUTPUT.
*   MODULE status_0100.
* PROCESS AFTER INPUT.
*   MODULE user_command_0100.
*----------------------------------------------------------------------
* END OF PROGRAM
*----------------------------------------------------------------------